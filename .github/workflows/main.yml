name: Deploy Python Lambda

on:
  push:
    branches:
      - main
    # paths:
    #   - '**.py' # Change to the file extension of the language that you are using.

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v2

    - name: Setup AWS CLI
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-northeast-2

    - name: Install dependencies and package application
      run: |
        mkdir lambda_package
        # 경로를 lambda_env 폴더 내부로 설정
        pip install -r lambda_env/requirements.txt -t lambda_package/
        cp lambda_env/main.py lambda_package/
        cd lambda_package
        zip -r ../help_mate.zip .
        cd ..

    - name: Upload ZIP to S3
      run: |
        aws s3 cp help_mate.zip s3://help-mate-bucket/help_mate.zip

    - name: Deploy Modified Files
      run: |
        S3_BUCKET=help-mate-bucket
        S3_KEY=help_mate.zip
        LAMBDA_FUNCTION_NAME=help_mate
        if aws s3api head-object --bucket $S3_BUCKET --key $S3_KEY 2>&1 | grep -q '404'; then
          echo "S3 object does not exist, creating a new one."
          aws s3 cp help_mate.zip s3://$S3_BUCKET/$S3_KEY
        fi
        aws s3 cp s3://$S3_BUCKET/$S3_KEY existing_lambda.zip
        unzip -o existing_lambda.zip -d lambda_env
        for file in $(git diff-tree --no-commit-id --name-only -r HEAD); do
            if [[ $file == *.py ]]; then
                mkdir -p lambda_env/$(dirname $file)
                cp $file lambda_env/$file
            fi
        done
        cd lambda_env
        zip -r ../updated_lambda.zip .
        cd ..
        aws s3 cp updated_lambda.zip s3://$S3_BUCKET/$S3_KEY
        aws lambda update-function-code --function-name $LAMBDA_FUNCTION_NAME --s3-bucket $S3_BUCKET --s3-key $S3_KEY
        rm -r lambda_env
        rm existing_lambda.zip updated_lambda.zip
